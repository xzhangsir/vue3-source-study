{
  "version": 3,
  "sources": ["../src/index.ts", "../src/runtimeHelpers.ts", "../src/ast.ts", "../src/genderate.ts", "../src/parse.ts", "../src/transforms/transformElement.ts", "../src/transforms/transformExpression.ts", "../../shared/src/index.ts", "../src/transforms/transformText.ts", "../src/transforms.ts"],
  "sourcesContent": ["import { genderate } from \"./genderate\";\r\nimport { parse } from \"./parse\";\r\nimport { transform } from \"./transforms\";\r\nexport function compile(template){\r\n  // \u4E09\u90E8\u66F2\uFF1A \u89E3\u6790  \u8F6C\u5316  \u751F\u6210\r\n\r\n  // \u5C06\u6A21\u677F \u8F6C\u5316\u4E3A\u62BD\u8C61\u8BED\u6CD5\u6811  html -> ast\r\n  const ast = parse(template)\r\n  // return ast\r\n\r\n  // \u5BF9ast\u8BED\u6CD5\u6811\u8FDB\u884C\u9884\u5148\u5904\u7406\r\n  transform(ast)\r\n\r\n  //return ast\r\n\r\n\r\n  return genderate(ast)  //\u6700\u7EC8\u751F\u6210\u4EE3\u7801\r\n}\r\n", "export const TO_DISPLAY_STRING  = Symbol('toDisplayString')\r\nexport const CREATE_TEXT  = Symbol('createTextVnode')\r\nexport const  CREATE_ELEMENT_VNODE = Symbol('createElementVnode')\r\nexport const OPEN_BLOCK = Symbol('openBlock')\r\nexport const CREATE_ELEMENT_BLOCK = Symbol('createElementBlock')\r\nexport const FRAGMENT =  Symbol('fragment')\r\n\r\nexport const helperMap = {\r\n  [TO_DISPLAY_STRING]:'toDisplayString',\r\n  [CREATE_TEXT]:'createTextVnode',\r\n  [CREATE_ELEMENT_VNODE]:'createElementVnode',\r\n  [OPEN_BLOCK]:\"openBlock\",\r\n  [CREATE_ELEMENT_BLOCK]:\"createElementBlock\",\r\n  [FRAGMENT]:'fragment'\r\n}", "import { CREATE_ELEMENT_VNODE, CREATE_TEXT } from \"./runtimeHelpers\";\r\n\r\nexport const enum NodeTypes {\r\n  ROOT,   //\u6839\u8282\u70B9\r\n  ELEMENT, // \u5143\u7D20\r\n  TEXT, // \u6587\u672C\r\n  COMMENT, // \u6CE8\u91CA\r\n  SIMPLE_EXPRESSION,// \u7B80\u5355\u8868\u8FBE\u5F0F aa\r\n  INTERPOLATION,// \u6A21\u677F\u8868\u8FBE\u5F0F  {{aa}}\r\n  ATTRIBUTE,\r\n  DIRECTIVE,\r\n  // containers\r\n  COMPOUND_EXPRESSION,// \u590D\u5408\u8868\u8FBE\u5F0F  {{aa}} bb\r\n  IF,\r\n  IF_BRANCH,\r\n  FOR,\r\n  TEXT_CALL,// \u6587\u672C\u8C03\u7528\r\n  // codegen\r\n  VNODE_CALL,//\u5143\u7D20\u8C03\u7528\r\n  JS_CALL_EXPRESSION,// JS\u8C03\u7528\u8868\u8FBE\u5F0F\r\n  JS_OBJECT_EXPRESSION  // JS\u8C03\u7528\u5143\u7D20\u8868\u8FBE\u5F0F\r\n}\r\n\r\n\r\nexport function createCallExpression(context,args){\r\n  let callee = context.helper(CREATE_TEXT)\r\n  return {\r\n    callee,\r\n    type:NodeTypes.JS_CALL_EXPRESSION,\r\n    arguments:args\r\n  }\r\n\r\n}\r\n\r\nexport function createObjectExpression(properties){\r\n  return {\r\n    type:NodeTypes.JS_OBJECT_EXPRESSION,\r\n    properties\r\n\r\n  }\r\n}\r\n\r\nexport function createVnodeCall(context,vnodeTag,propsExpression,childrenNode){\r\n  let callee = context.helper(CREATE_ELEMENT_VNODE)\r\n  return {\r\n    callee,\r\n    tag:vnodeTag,\r\n    type:NodeTypes.VNODE_CALL,\r\n    children:childrenNode,\r\n    props:propsExpression,\r\n\r\n  }\r\n}", "import { NodeTypes } from \"./ast\"\r\nimport { helperMap, TO_DISPLAY_STRING } from \"./runtimeHelpers\"\r\nexport function genderate(ast){\r\n  console.log(\"\u751F\u6210\u6700\u7EC8\u7684\u4EE3\u7801\",ast)\r\n  const context = createCodeContext(ast)\r\n  console.log(context)\r\n/*    context.push(\"var a = 1\")\r\n  context.indent()\r\n  context.push(\"var b = 2\")\r\n  context.deindent()\r\n  context.push(\"console.log(a+b)\")\r\n  console.log(context.code) */\r\n  const {push,indent,deindent} = context\r\n  getFunctionPreable(ast,context)  //\u5F00\u5934\r\n  const functionName = \"render\"\r\n  const args = ['_ctx','_cache',\"$props\"]\r\n\r\n  push(`function ${functionName}(${args.join(',')}){`)\r\n  indent()\r\n  push(`return `)\r\n  console.log(ast.codegenNode);\r\n\r\n  if(ast.codegenNode){\r\n    genNode(ast.codegenNode,context)\r\n\r\n  }else{\r\n    push(\"null\")\r\n  }\r\n\r\n  deindent()\r\n  push(\"}\")\r\n\r\n  // console.log(context.code);\r\n\r\n  return context.code\r\n\r\n}\r\nfunction getFunctionPreable(ast,context){\r\n  if(ast.helpers.length > 0 ){ \r\n    context.push(`import {${ast.helpers.map(h=>`${context.helper(h)} as _${context.helper(h)}`).join(',')}} from \"vue\"`)\r\n    context.newline()\r\n  }\r\n  context.push(\"export \")\r\n}\r\n\r\nfunction createCodeContext(ast){\r\n  const context = {\r\n    code:'',  //\u6700\u540E\u7684\u751F\u6210\u7ED3\u679C\r\n    helper(name){\r\n      return `${helperMap[name]}`\r\n    },\r\n    push(code){\r\n      context.code += code\r\n    },\r\n    indentLevel:0, //\u5C42\u7EA7\r\n    indent(){ //\u5411\u540E\u7F29\u51CF\r\n      ++context.indentLevel\r\n      context.newline()\r\n    },  \r\n    deindent(whithoutNewLine = false){//\u5411\u524D\u7F29\u51CF\r\n      --context.indentLevel\r\n      if(!whithoutNewLine){\r\n          context.newline()\r\n      }\r\n    },\r\n    newline(){ //\u6839\u636EindentLevel\u751F\u6210\u65B0\u7684\u884C\r\n      newline(context.indentLevel)\r\n    }, \r\n\r\n  }\r\n  function newline(n){\r\n    context.push('\\n' + \"  \".repeat(n))\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nfunction genNode(node,context){\r\n  switch(node.type){\r\n    case NodeTypes.TEXT:\r\n      genText(node,context)\r\n      break;\r\n    case NodeTypes.INTERPOLATION:\r\n      genInterpolation(node,context)\r\n      break;\r\n    case NodeTypes.SIMPLE_EXPRESSION:\r\n      genExpression(node,context)\r\n      break;\r\n  }\r\n}\r\n\r\nfunction genText(node,context){\r\n  context.push(JSON.stringify(node.content))\r\n}\r\nfunction genInterpolation(node,context){\r\n  context.push(`_${helperMap[TO_DISPLAY_STRING]}(`)\r\n  genNode(node.context,context)\r\n  context.push(')')\r\n}\r\nfunction genExpression(node,context){\r\n    context.push(node.content)\r\n}\r\n\r\n", "import { NodeTypes } from \"./ast\";\r\n\r\nexport function parse(template){\r\n  // \u521B\u5EFA\u4E00\u4E2A\u89E3\u6790\u7684\u4E0A\u4E0B\u6587 \r\n  const context = createParserContext(template)\r\n // return parseChildren(context)\r\n  const start = getCursor(context)\r\n\r\n  return  createRoot(parseChildren(context),getSelection(context,start))  \r\n}\r\n\r\nfunction createRoot(children,loc){\r\n  return {\r\n    type:NodeTypes.ROOT,  //Fragment\r\n    children,\r\n    loc\r\n  }\r\n}\r\n\r\n\r\nfunction parseChildren(context){\r\n    //  <  \u5143\u7D20\r\n  //  {{}} \u8868\u8FBE\u5F0F\r\n  //  \u5176\u4ED6 \u6587\u672C \u6CE8\u91CA\u7B49\r\n  const nodes = []\r\n\r\n  while(!isEnd(context)){\r\n    const source  = context.source\r\n    let node;\r\n    if(source.startsWith(\"{{\")){\r\n      node = parseInterpolation(context)\r\n    }else if(source.startsWith(\"<\")){\r\n      node = parseElement(context)\r\n    }\r\n\r\n    // \u6587\u672C\r\n    if(!node){\r\n      node = parseText(context)\r\n\r\n    }\r\n    nodes.push(node)\r\n    // break;\r\n  }\r\n\r\n  return nodes\r\n  // return context\r\n}\r\n\r\nfunction createParserContext(template){\r\n    return {\r\n      line:1,   //\u7B2C\u51E0\u884C\r\n      column:1, //\u7B2C\u51E0\u5217\r\n      offset:0,    //\u504F\u79FB\u91CF\r\n      source:template,  //\u6B64\u5B57\u6BB5\u4F1A\u88AB\u4E0D\u505C\u7684\u8FDB\u884C\u89E3\u6790  slice\r\n      originalSource:template\r\n    }\r\n}\r\n\r\nfunction isEnd(context){\r\n  // \u5982\u679C\u89E3\u6790\u5B8C\u6BD5\u540E\u4E3A\u7A7A\u5B57\u7B26\u4E32\u6216\u4E3A</  \u8868\u793A\u89E3\u6790\u5B8C\u6BD5\r\n  const source = context.source\r\n  if(source.startsWith('</')){\r\n    return true\r\n  }\r\n  return !source\r\n}\r\n// \u5904\u7406\u63D2\u503C\u8868\u8FBE\u5F0F\r\nfunction parseInterpolation(context){\r\n  const start = getCursor(context)\r\n  // \u67E5\u627E\u7ED3\u675F\u7684\u5927\u62EC\u53F7\r\n  const closeIndex = context.source.indexOf(\"}}\",\"{{\".length)\r\n  advanceBy(context,2)  //\u5220\u6389 {{\r\n  const innerStart = getCursor(context)\r\n  const innerEnd = getCursor(context)\r\n  // \u62FF\u5230\u5927\u62EC\u53F7\u4E2D\u5185\u5BB9\u7684\u957F\u5EA6\r\n  const rawContentLength = closeIndex - 2;\r\n  // \u62FF\u5230\u6587\u672C\u5185\u5BB9   \u4E14\u66F4\u65B0\u4E86\u884C\u5217 \u504F\u79FB\u91CF\u4FE1\u606F\r\n  let preContent = parseTextData(context,rawContentLength)\r\n  let content = preContent.trim()\r\n\r\n  let startOffset = preContent.indexOf(content)\r\n  if(startOffset > 0 ){\r\n    advancePositionWithMutation(innerStart,preContent,startOffset)\r\n  }\r\n  let endOffset = startOffset + content.length\r\n\r\n  advancePositionWithMutation(innerEnd,preContent,endOffset)\r\n\r\n  advanceBy(context,2)  //\u5220\u6389 }}\r\n\r\n  return {\r\n    type:NodeTypes.INTERPOLATION,\r\n    context:{\r\n      type:NodeTypes.SIMPLE_EXPRESSION,\r\n      content,\r\n      loc:getSelection(context,innerStart,innerEnd)\r\n    },\r\n    loc:getSelection(context,start)\r\n  }\r\n}\r\n\r\n// \u5904\u7406\u6807\u7B7E\r\nfunction parseElement(context){\r\n  // <div>\r\n let ele = parseTag(context)\r\n  // div\u4E2D\u95F4\u7684\u90E8\u5206\r\n  let children = parseChildren(context)\r\n  //  </div>\r\n if(context.source.startsWith(\"</\")){\r\n    parseTag(context)\r\n  }\r\n  ele.loc = getSelection(context,ele.loc.start)  //\u8BA1\u7B97\u6700\u65B0\u7684\u4F4D\u7F6E\u4FE1\u606F\r\n  ele.children = children\r\n  return ele\r\n}\r\n\r\n// \u5904\u7406\u6587\u672C\r\nfunction parseText(context){\r\n  // abc<a></a>{{abc}}\r\n  // \u5728\u89E3\u6790\u6587\u672C\u7684\u65F6\u5019  \u8981\u770B\u540E\u9762\u5230\u54EA\u91CC\u7ED3\u675F\r\n  let endTokens = ['<',\"{{\"]\r\n  // \u9ED8\u8BA4\u6587\u672C\u5230\u6700\u540E\u7ED3\u675F\r\n  let endIndex = context.source.length \r\n  for(let i = 0 ; i < endTokens.length ;i++){\r\n    let index = context.source.indexOf(endTokens[i],1)\r\n    // \u627E\u5230\u4E86 \u5E76\u4E14\u7B2C\u4E00\u6B21\u6BD4\u6574\u4E2A\u5B57\u7B26\u4E32\u5C0F\r\n    if(index !== -1 && endIndex > index){\r\n      endIndex = index\r\n    }\r\n  }\r\n\r\n  // \u521B\u5EFA \u884C\u5217\u4FE1\u606F\r\n\r\n  const start = getCursor(context) //\u5F00\u59CB\u4F4D\u7F6E\r\n  // \u53D6\u5185\u5BB9  advancePositionWithMutation\u518D\u83B7\u53D6\u7ED3\u675F\u4F4D\u7F6E\r\n  const content = parseTextData(context,endIndex)\r\n  return {\r\n      type:NodeTypes.TEXT,\r\n      content:content,\r\n      loc:getSelection(context,start)\r\n    } \r\n}\r\n\r\nfunction parseTag(context){\r\n  const start = getCursor(context);\r\n  const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source);\r\n  const tag = match[1]  //\u6807\u7B7E\u540D\r\n  // console.log(tag);\r\n  advanceBy(context,match[0].length)  //\u5220\u9664\u6807\u7B7E <div\r\n  advanceBySpaces(context)   // \u5220\u7A7A\u683C <div     >\r\n   // \u5904\u7406\u5C5E\u6027\r\n  let props = parseAttributes(context)\r\n   // \u5224\u65AD\u662F\u4E0D\u662F\u4E00\u4E2A\u81EA\u95ED\u548C\u6807\u7B7E\r\n\r\n  let isSelfClosing = context.source.startsWith(\"/>\")\r\n  advanceBy(context,isSelfClosing?2:1)   //\u5220\u9664 /> \u6216\u8005 >\r\n   return {\r\n    type:NodeTypes.ELEMENT,\r\n    tag,\r\n    isSelfClosing,\r\n    children:[],\r\n    props,\r\n    loc:getSelection(context,start)\r\n  }\r\n}\r\n\r\n\r\n\r\n// \u5220\u7A7A\u683C <div     >\r\nfunction advanceBySpaces(context){\r\n  let match = /^[ \\t\\r\\n]+/.exec(context.source)\r\n  if(match){\r\n      advanceBy(context,match[0].length) \r\n  }\r\n}\r\n\r\n// \u5904\u7406\u5C5E\u6027\r\nfunction parseAttributes(context){\r\n  const props = []\r\n  let source = context.source\r\n  while(source.length > 0 && !(source.startsWith('>') || source.startsWith('/>'))){\r\n    const prop = parseAttribute(context)\r\n    props.push(prop)\r\n    advanceBySpaces(context) //\u5220\u7A7A\u683C\r\n    source = context.source\r\n  }\r\n  return props\r\n}\r\n\r\nfunction parseAttribute(context){\r\n  const start = getCursor(context)\r\n\r\n  // \u5C5E\u6027\u7684\u540D\u5B57\r\n  const match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source)\r\n  let name = match[0]\r\n  advanceBy(context,name.length)\r\n  advanceBySpaces(context) //\u5220\u7A7A\u683C\r\n  advanceBy(context,1)  //\u5220 \u7B49\u4E8E\u53F7 =\r\n  advanceBySpaces(context) //\u5220\u7A7A\u683C\r\n  let value = parseAttributeValue(context)\r\n\r\n\r\n  return {\r\n    type:NodeTypes.ATTRIBUTE,\r\n    name,\r\n    value:{\r\n      type:NodeTypes.TEXT,\r\n      ...value\r\n    },\r\n    loc:getSelection(context,start)\r\n  }\r\n}\r\n\r\nfunction parseAttributeValue(context){\r\n  const start = getCursor(context)\r\n    let quote = context.source[0]\r\n    let content;\r\n    // \u5224\u65AD\u662F\u5355\u5F15\u53F7\u8FD8\u662F\u53CC\u5F15\u53F7  \u8FD8\u6709\u53EF\u80FD\u6CA1\u6709 \u5148\u4E0D\u5904\u7406\r\n    if(quote == '\"' || quote == \"'\"){\r\n      advanceBy(context,1)\r\n      const endIndex = context.source.indexOf(quote)\r\n      content = parseTextData(context,endIndex)\r\n      advanceBy(context,1)\r\n    }\r\n\r\n    return {\r\n      content,\r\n      loc:getSelection(context,start)\r\n    }\r\n}\r\n\r\nfunction getCursor(context){\r\n  let {line,column,offset} = context\r\n  return {line,column,offset}\r\n}\r\n\r\nfunction parseTextData(context,endIndex){\r\n  const  rawText = context.source.slice(0,endIndex)\r\n  advanceBy(context,endIndex)  //\u5220\u9664\u6587\u672C\r\n  return rawText\r\n}\r\nfunction advanceBy(context,endIndex){\r\n  // \u6BCF\u6B21\u5220\u9664\u5185\u5BB9\u7684\u65F6\u5019  \u90FD\u8981\u66F4\u65B0\u6700\u65B0\u7684\u884C\u5217\u548C\u504F\u79FB\u91CF\u4FE1\u606F\r\n  let source = context.source\r\n  advancePositionWithMutation(context,source,endIndex)\r\n  context.source = source.slice(endIndex)\r\n}\r\n\r\nfunction advancePositionWithMutation(context,source,endIndex){\r\n  let linesCount = 0;\r\n  let linePos = -1;\r\n  for(let i = 0 ; i < endIndex ; i++){\r\n    if(source.charCodeAt(i) == 10){\r\n      // \u6362\u884C+1\r\n      linesCount++;\r\n      linePos = i\r\n    }\r\n  }\r\n  context.line += linesCount //\u884C\r\n  context.offset += endIndex //\u504F\u79FB\u91CF\r\n  //\u7B2C\u51E0\u5217\r\n  context.column = linePos == -1 ? context.column + endIndex : endIndex - linePos\r\n}\r\n\r\nfunction getSelection(context,start,end?){\r\n  end = end || getCursor(context)\r\n  return {\r\n    start,\r\n    end,\r\n    source:context.originalSource.slice(start.offset,end.offset)\r\n  }\r\n}", "import { NodeTypes,createObjectExpression, createVnodeCall } from \"../ast\";\r\n\r\nexport function transformElement(node,context){\r\n if(node.type === NodeTypes.ELEMENT){\r\n     return ()=>{\r\n         console.log(\"\u5143\u7D20\"); \r\n         let vnodeTag = `${node.tag}`\r\n         let properties = []\r\n         let props = node.props\r\n         for(let i = 0 ; i < props.length  ;i++){\r\n            properties.push({\r\n               key:props[i].name,\r\n               value:props[i].value.content\r\n            })\r\n         }\r\n         console.log(\"properties\",properties)\r\n         // \u521B\u5EFA\u4E00\u4E2A\u5C5E\u6027\u7684\u8868\u8FBE\u5F0F\r\n         const propsExpression = properties.length > 0 ? createObjectExpression(properties) : null\r\n\r\n         let childrenNode = null\r\n         if(node.children.length == 1){\r\n            childrenNode = node.children[0]\r\n         }else if(node.children.length > 1){\r\n            childrenNode = node.children\r\n         }\r\n\r\n          node.codegenNode = createVnodeCall(context,vnodeTag,propsExpression,childrenNode)\r\n\r\n     }\r\n  }\r\n}\r\n", "import { NodeTypes } from \"../ast\";\r\n\r\nexport function transformExpression(node,context){\r\n // {{ aa }}\r\n \r\n  // console.log(node,context);\r\n  if(node.type === NodeTypes.INTERPOLATION){\r\n    console.log(\"{{}}\",node)\r\n   let content = node.context.content\r\n    node.context.content ==  `__ctx.${content}`\r\n  }\r\n}", "export  const isObject = (val:any)=>{\r\n  return typeof val === 'object' && val !== null\r\n}\r\n\r\nexport const isFunction = (val)=>{\r\n  return typeof val === 'function'\r\n}\r\nexport const isString = (val)=>{\r\n  return typeof val === 'string'\r\n}\r\nexport const isNumber = (val)=>{\r\n  return typeof val === 'number'\r\n}\r\nexport const hasChanged = (value: any, oldValue: any): boolean =>\r\n  !Object.is(value, oldValue)\r\nexport const isArray = Array.isArray\r\nexport const extend = Object.assign\r\n\r\nexport const enum ShapeFlags { // \u5F62\u72B6\u6807\u8BC6\r\n  ELEMENT = 1,\r\n  FUNCTIONAL_COMPONENT = 1 << 1,\r\n  STATEFUL_COMPONENT = 1 << 2,\r\n  TEXT_CHILDREN = 1 << 3,\r\n  ARRAY_CHILDREN = 1 << 4,\r\n  SLOTS_CHILDREN = 1 << 5,\r\n  TELEPORT = 1 << 6,\r\n  SUSPENSE = 1 << 7,\r\n  COMPONENT_SHOULD_KEEP_ALIVE = 1 << 8,\r\n  COMPONENT_KEPT_ALIVE = 1 << 9,\r\n  COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT\r\n}\r\n\r\n// \u4F4D\u8FD0\u7B97 & | \u9002\u5408\u6743\u9650\u7684\u7EC4\u5408 \r\n// let user = \u589E\u52A0\uFF0801\uFF09 | \u5220\u9664 \uFF0810\uFF09 \uFF1B 11\r\n// user\uFF0811\uFF09 & \u589E\u52A0\uFF0801\uFF09  \u5F97 01  \u6545\u800C\u5224\u65AD\u7528\u6237\u6709\u589E\u52A0\u7684\u6743\u9650\r\n\r\n\r\nexport  const invokeArrayFns = (fns)=>{\r\n  for(let i = 0 ; i < fns.length ;i++){\r\n    fns[i]()\r\n  }\r\n}\r\n\r\n\r\nexport const enum PatchFlags {\r\n  TEXT = 1,   // \u52A8\u6001\u6587\u672C\u8282\u70B9\r\n  CLASS = 1 << 1, // \u52A8\u6001class\r\n  STYLE = 1 << 2,// \u52A8\u6001style\r\n  PROPS = 1 << 3,// \u9664\u4E86class\\style\u52A8\u6001\u5C5E\u6027\r\n  FULL_PROPS = 1 << 4,//\u6709key \u9700\u8981\u5B8C\u6574\u7684diff\r\n  HYDRATE_EVENTS = 1 << 5,// \u6302\u8F7D\u8FC7\u4E8B\u4EF6\u7684\r\n  STABLE_FRAGMENT = 1 << 6,// \u7A33\u5B9A\u5E8F\u5217 \u5B50\u8282\u70B9\u987A\u5E8F\u4E0D\u4F1A\u53D1\u9001\u53D8\u5316\r\n  KEYED_FRAGMENT = 1 << 7,// \u5B50\u8282\u70B9\u6709key\u7684fragment\r\n  UNKEYED_FRAGMENT = 1 << 8,// \u5B50\u8282\u70B9\u6CA1\u6709key\u7684fragment\r\n  NEED_PATCH = 1 << 9,// \u8FDB\u884C\u975Eprops\u6BD4\u8F83 ref\u6BD4\u8F83\r\n  DYNAMIC_SLOTS = 1 << 10,// \u52A8\u6001\u63D2\u69FD\r\n  DEV_ROOT_FRAGMENT = 1 << 11,\r\n  HOISTED = -1,// \u8868\u793A\u9759\u6001\u8282\u70B9 \u5185\u5BB9\u53D8\u5316 \u4E0D\u6BD4\u8F83\u513F\u5B50\r\n  BAIL = -2// \u8868\u793Adiff\u7B97\u6CD5\u5E94\u8BE5\u7ED3\u675F\r\n}\r\n", "import { PatchFlags } from \"@vue/shared\";\r\nimport { createCallExpression,NodeTypes } from \"../ast\";\r\nexport function transformText(node,context){\r\n  if(node.type === NodeTypes.ELEMENT || node.type === NodeTypes.ROOT){\r\n    return ()=>{\r\n        console.log(\"\u6587\u672C\");\r\n        let currentContainer = null\r\n        let children = node.children\r\n        let hasText = null\r\n        for(let i = 0 ; i < children.length ;i++){\r\n          let child = children[i]\r\n          hasText = true\r\n          // \u770B\u5F53\u524D\u7684\u8282\u70B9\u662F\u4E0D\u662F\u6587\u672C\r\n          if(isText(child)){\r\n            // \u770B\u4E0B\u4E00\u4E2A\u8282\u70B9\u662F\u4E0D\u662F\u6587\u672C\r\n            for(let j = i + 1; j < children.length ;j++){\r\n              let next = children[j]\r\n              if(isText(next)){\r\n                if(!currentContainer){\r\n                  currentContainer = children[i] = {\r\n                    // \u590D\u5408\u8868\u8FBE\u5F0F  {{aa}} bb\r\n                    type:NodeTypes.COMPOUND_EXPRESSION,\r\n                    children:[child]\r\n                  }\r\n                }\r\n                currentContainer.children.push(\"+\",next)\r\n                children.splice(j,1)\r\n                j--\r\n              }else{\r\n                currentContainer = null\r\n                break\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(\"children\",children)\r\n        if(!hasText || children.length == 1){\r\n          return\r\n        } \r\n        // \u9700\u8981\u7ED9\u591A\u4E2A\u513F\u5B50\u4E2D\u7684\u521B\u5EFA\u6587\u672C\u8282\u70B9\u6DFB\u52A0patchFlag\r\n\r\n        for(let i = 0 ; i < children.length ; i++){\r\n          const child = children[i]\r\n          const callArgs = []\r\n          if(isText(child) || child.type === NodeTypes.COMPOUND_EXPRESSION){\r\n            callArgs.push(child)\r\n            if(node.type !== NodeTypes.TEXT){\r\n              // \u52A8\u6001\u8282\u70B9\r\n              callArgs.push(PatchFlags.TEXT) //\u7528\u4E8E\u9776\u5411\u66F4\u65B0\r\n            }\r\n            children[i] = {\r\n              type:NodeTypes.TEXT_CALL,  //\u901A\u8FC7createTextVnode\u6765\u5B9E\u73B0\r\n              content :child,\r\n              codegenNode:createCallExpression(context,callArgs)\r\n            }\r\n          }\r\n        }\r\n\r\n     }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function isText(node){\r\n  // \u5224\u65AD\u662F\u4E0D\u662F \u6A21\u677F\u8868\u8FBE\u5F0F  \u6216\u8005 \u6587\u672C\r\n  return node.type === NodeTypes.INTERPOLATION  || node.type === NodeTypes.TEXT\r\n}", "import { NodeTypes ,createVnodeCall} from \"./ast\";\r\nimport { transformElement } from \"./transforms/transformElement\";\r\nimport { transformExpression } from \"./transforms/transformExpression\";\r\nimport { transformText } from \"./transforms/transformText\";\r\nimport { CREATE_ELEMENT_BLOCK, CREATE_ELEMENT_VNODE, FRAGMENT, OPEN_BLOCK, TO_DISPLAY_STRING } from \"./runtimeHelpers\";\r\n\r\nexport function transform(ast){\r\n  // \u5BF9tree\u8FDB\u884C\u904D\u5386\r\n  const context = createTransformContext(ast)\r\n  console.log(ast,context);\r\n  traverse(ast,context)\r\n  createRootCodegen(ast,context)\r\n  ast.helpers = [...context.helpers.keys()]\r\n\r\n  //  \u6839\u636E\u8F6C\u5316\u7684ast\u751F\u6210\u4EE3\u7801\r\n\r\n}\r\n\r\nfunction createTransformContext(root){\r\n  const context = {\r\n    currentNode:root, //\u5F53\u524D\u6B63\u5728\u8F6C\u5316\u7684\u662F\u8C01\r\n    parent:null, // \u5F53\u524D\u8F6C\u5316\u7684\u7236\u8282\u70B9\u662F\u8C01\r\n    helpers:new Map(),  //\u4F18\u5316\r\n    helper(name){ // \u6839\u636E\u4F7F\u7528\u7684\u65B9\u6CD5\u6B21\u6570\u8FDB\u884C\u4F18\u5316\r\n      const count = context.helpers.get(name) || 0\r\n      context.helpers.set(name,count + 1) \r\n      return name\r\n    },\r\n    removeHelper(name){\r\n      const count = context.helpers.get(name)\r\n      if(count){\r\n        const currentCount = count - 1\r\n        if(currentCount){\r\n          context.helpers.set(name,count)\r\n        }else{\r\n          context.helpers.delete(name)\r\n        }\r\n      }\r\n    },\r\n    nodeTransforms:[\r\n      transformElement,//\u5143\u7D20\r\n      transformText,//\u6587\u672C\r\n      transformExpression//\u8868\u8FBE\u5F0F\r\n    ]\r\n  }\r\n  return context\r\n}\r\n\r\nfunction traverse(node,context){\r\n  context.currentNode = node\r\n  const transforms = context.nodeTransforms\r\n  const exitsFns = []\r\n  for(let i = 0 ; i < transforms.length ; i++){\r\n     //\u5728\u6267\u884C\u8FD9\u4E2A\u7684\u65F6\u5019  \u6709\u53EF\u80FD\u8FD9\u4E2Anode\u88AB\u5220\u9664\u4E86\r\n    let onExit = transforms[i](node,context)\r\n    onExit && exitsFns.push(onExit)\r\n    //\u5982\u679C\u5F53\u524D\u8282\u70B9\u88AB\u5220\u9664\u4E86 \u5C31\u4E0D\u8003\u8651\u513F\u5B50\u8282\u70B9\u4E86\r\n    if(!context.currentNode) return \r\n  }\r\n  switch(node.type){\r\n    case NodeTypes.INTERPOLATION:\r\n        // {{aa}}\r\n        context.helper(TO_DISPLAY_STRING)\r\n        break;\r\n    case NodeTypes.ELEMENT:\r\n    case NodeTypes.ROOT:\r\n        for(let i = 0 ; i < node.children.length ;i++){\r\n          context.parent = node\r\n          traverse(node.children[i],context)\r\n        }\r\n        break;\r\n  }\r\n  // \u5F53\u6267\u884C\u9000\u51FA\u51FD\u6570\u7684\u65F6\u5019 \u4FDD\u8BC1 currentNode \u6307\u5411\u7684\u4F9D\u65E7\u662F\u6B63\u786E\u7684\r\n  context.currentNode = node\r\n  // \u4ECE\u91CC\u9762\u5411\u5916\u4E00\u5C42\u4E00\u5C42\u6267\u884C\r\n  let i = exitsFns.length\r\n  while(i--){\r\n    exitsFns[i]()\r\n  }\r\n}\r\n\r\nfunction createRootCodegen(ast,context){\r\n  let {children} = ast\r\n  if(children.length === 1){\r\n    const child = children[0]\r\n    if(child.type === NodeTypes.ELEMENT && child.codegenNode){\r\n      ast.codegenNode = child.codegenNode\r\n      context.removeHelper(CREATE_ELEMENT_VNODE)\r\n      context.helper(OPEN_BLOCK)\r\n      context.helper(CREATE_ELEMENT_BLOCK)\r\n      ast.codegenNode.isBlock = true \r\n    }else{\r\n      ast.codegenNode = child\r\n    }\r\n  }else{\r\n    if(children.length == 0 ) return\r\n    ast.codegenNode = createVnodeCall(context,context.helper(FRAGMENT),null,ast.children)\r\n    context.helper(OPEN_BLOCK)\r\n    context.helper(CREATE_ELEMENT_BLOCK)\r\n    ast.codegenNode.isBlock = true \r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["i"]
}
